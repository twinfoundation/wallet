name: 'Setup Testing Environment'
description: 'Set up the testing environment for running tests from the build workflow.'

inputs:
  package:
    description: 'The package to set up the test environment for.'
    required: true
    default: 'all'

runs:
  using: 'composite'
  steps:
    - name: Download IOTA CLI
      shell: bash
      run: |
        cd ..
        wget https://github.com/iotaledger/iota/releases/download/v1.0.0/iota-v1.0.0-linux-x86_64.tgz -O iota-cli.tgz
        tar xzf iota-cli.tgz
        rm iota-cli.tgz
        chmod +x iota
        sudo mv iota /usr/local/bin/iota
        iota --version

    - name: Start Twin Gas Station Test Environment
      shell: bash
      run: |
        echo "Starting Twin Gas Station Test Environment (includes Redis + Gas Station)..."
        docker run -d --name twin-gas-station-test \
          -p 6379:6379 -p 9527:9527 -p 9184:9184 \
          -e IOTA_NODE_URL="https://api.testnet.iota.cafe" \
          -e GAS_STATION_AUTH="qEyCL6d9BKKFl/tfDGAKeGFkhUlf7FkqiGV7Xw4JUsI=" \
          twinfoundation/twin-gas-station-test:latest

    - name: Wait for Services to be Ready
      shell: bash
      run: |
        echo "Waiting for Redis and Gas Station to start..."

        # Wait for Redis
        for i in {1..30}; do
          if docker exec twin-gas-station-test redis-cli ping 2>/dev/null | grep -q PONG; then
            echo "✅ Redis is ready!"
            break
          fi
          echo "Attempt $i: Redis not ready yet, waiting..."
          sleep 2
        done

        # Wait for Gas Station
        for i in {1..30}; do
          if curl -f http://localhost:9527/ 2>/dev/null; then
            echo "✅ Gas station is ready!"
            break
          fi
          echo "Attempt $i: Gas station not ready yet, waiting..."
          sleep 2
        done

        echo "✅ All services are ready!"

    - name: Fund Gas Station Sponsor
      shell: bash
      run: |
        echo "Getting sponsor address from gas station..."
        SPONSOR_RESPONSE=$(curl -s -X POST http://localhost:9527/v1/reserve_gas \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer qEyCL6d9BKKFl/tfDGAKeGFkhUlf7FkqiGV7Xw4JUsI=" \
          -d '{"gas_budget": 10000000, "reserve_duration_secs": 10}')

        SPONSOR_ADDRESS=$(echo "$SPONSOR_RESPONSE" | jq -r '.result.sponsor_address')
        echo "Sponsor address: $SPONSOR_ADDRESS"

        if [ "$SPONSOR_ADDRESS" != "null" ] && [ -n "$SPONSOR_ADDRESS" ]; then
          echo "Funding sponsor address with IOTA faucet..."
          curl -X POST "https://faucet.testnet.iota.cafe/gas" \
            -H "Content-Type: application/json" \
            -d "{\"FixedAmountRequest\":{\"recipient\":\"$SPONSOR_ADDRESS\"}}" || echo "Faucet funding may have failed, but continuing..."
          
          echo "Waiting 10 seconds for funding to process..."
          sleep 10
          
          echo "Verifying gas station can reserve gas after funding..."
          TEST_RESPONSE=$(curl -s -X POST http://localhost:9527/v1/reserve_gas \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer qEyCL6d9BKKFl/tfDGAKeGFkhUlf7FkqiGV7Xw4JUsI=" \
            -d '{"gas_budget": 50000000, "reserve_duration_secs": 30}')
          
          if echo "$TEST_RESPONSE" | jq -e '.result' > /dev/null; then
            echo "✅ Gas station successfully funded and operational!"
          else
            echo "⚠️ Gas station may not be properly funded, but continuing..."
            echo "Response: $TEST_RESPONSE"
          fi
        else
          echo "Failed to get sponsor address, but continuing..."
        fi
