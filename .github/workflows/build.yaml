name: Build

on:
  workflow_dispatch:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  dist-all-packages:
    runs-on: ubuntu-latest

    # Add env vars for tests
    env:
      TEST_MNEMONIC: ${{ secrets.TEST_MNEMONIC }}
      TEST_2_MNEMONIC: ${{ secrets.TEST_2_MNEMONIC }}
      TEST_NODE_MNEMONIC: ${{ secrets.TEST_NODE_MNEMONIC }}
      TEST_GAS_STATION_URL: http://localhost:9527
      TEST_GAS_STATION_AUTH_TOKEN: qEyCL6d9BKKFl/tfDGAKeGFkhUlf7FkqiGV7Xw4JUsI=
      TEST_NODE_ENDPOINT: https://api.testnet.iota.cafe
      TEST_NETWORK: testnet

    steps:
      # Get the code
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Install jq for JSON parsing
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Setup any services required for tests here

      # Start Redis for gas station storage
      - name: Start Redis
        run: |
          docker run -d --name redis -p 6379:6379 redis:7-alpine

      # Create gas station config file
      - name: Create gas station config
        run: |
          cat > gas-station-config.yaml << EOF
          signer-config:
            local:
              keypair: AKT1Ghtd+yNbI9fFCQin3FpiGx8xoUdJMe7iAhoFUm4f
          rpc-host-ip: 0.0.0.0
          rpc-port: 9527
          metrics-port: 9184
          storage-config:
            redis:
              redis_url: "redis://127.0.0.1:6379"
          fullnode-url: "https://api.testnet.iota.cafe"
          coin-init-config:
            target-init-balance: 100000000
            refresh-interval-sec: 86400
          daily-gas-usage-cap: 1500000000000
          access-controller:
            access-policy: disabled
          EOF

      # Start IOTA Gas Station
      - name: Start IOTA Gas Station
        run: |
          docker run -d --name gas-station \
            -p 9527:9527 -p 9184:9184 \
            -v $(pwd)/gas-station-config.yaml:/config/config.yaml \
            --network host \
            -e GAS_STATION_AUTH=qEyCL6d9BKKFl/tfDGAKeGFkhUlf7FkqiGV7Xw4JUsI= \
            iotaledger/gas-station:latest \
            --config-path /config/config.yaml

      # Wait for gas station to be ready
      - name: Wait for Gas Station
        run: |
          echo "Waiting for gas station to start..."
          for i in {1..30}; do
            if curl -f http://localhost:9527/ 2>/dev/null; then
              echo "Gas station is ready!"
              break
            fi
            echo "Attempt $i: Gas station not ready yet, waiting..."
            sleep 5
          done

      # Get sponsor address and fund it
      - name: Fund Gas Station Sponsor
        run: |
          echo "Getting sponsor address from gas station..."
          SPONSOR_RESPONSE=$(curl -s -X POST http://localhost:9527/v1/reserve_gas \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer qEyCL6d9BKKFl/tfDGAKeGFkhUlf7FkqiGV7Xw4JUsI=" \
            -d '{"gas_budget": 10000000, "reserve_duration_secs": 10}')

          SPONSOR_ADDRESS=$(echo "$SPONSOR_RESPONSE" | jq -r '.result.sponsor_address')
          echo "Sponsor address: $SPONSOR_ADDRESS"

          if [ "$SPONSOR_ADDRESS" != "null" ] && [ -n "$SPONSOR_ADDRESS" ]; then
            echo "Funding sponsor address with IOTA faucet..."
            # Fund the sponsor address using IOTA testnet faucet
            curl -X POST "https://faucet.testnet.iota.cafe/api/enqueue" \
              -H "Content-Type: application/json" \
              -d "{\"address\":\"$SPONSOR_ADDRESS\"}" || echo "Faucet funding may have failed, but continuing..."
            
            echo "Waiting 10 seconds for funding to process..."
            sleep 10
            
            # Verify funding worked by testing gas reservation again
            echo "Verifying gas station can reserve gas after funding..."
            TEST_RESPONSE=$(curl -s -X POST http://localhost:9527/v1/reserve_gas \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer qEyCL6d9BKKFl/tfDGAKeGFkhUlf7FkqiGV7Xw4JUsI=" \
              -d '{"gas_budget": 50000000, "reserve_duration_secs": 30}')
            
            if echo "$TEST_RESPONSE" | jq -e '.result' > /dev/null; then
              echo "✅ Gas station successfully funded and operational!"
            else
              echo "⚠️ Gas station may not be properly funded, but continuing..."
              echo "Response: $TEST_RESPONSE"
            fi
          else
            echo "Failed to get sponsor address, but continuing..."
          fi

      # End setup for tests

      # Run Lint and Dist
      - name: Run Lint and Dist
        run: |
          npm run lint
          npm run dist
